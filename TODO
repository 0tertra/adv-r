# Advanced programming

Priorities for class (June 8-9):
  * Documentation & namespaces
  * Performance and profiling
  * Flesh out development process
  * Computing on the language (srcrefs)
  * S3, S4, R5
  * S3: better example
  * S3: group generics
  * Unit testing (rewrite for this audience)
  * Package release

* CotL: parser package
* CotL: srcrefs
* E&D
* Evaluation: more exercises
* FCF: tweaks
* Lazy eval: move lazy arguments to scoping and kill chapter
* P&P
* Prereqs: skim R cookbook
* R5
* Rcpp
* S4: better example
* S4: group generics
* Scoping: local
* Scoping: namespaces
* Scoping: dynamic

* Advanced functions?
  * do.call?
  * default arguments and evaluation rules
* Recursive data structures: lists, pairlists, calls, expressions, environments, closures'

All chapters should:
* Start with motivation - why should you care about learning this
* Exercises - so you can practice your new skills
* Summary - for future referece


# OO ideas

* modelling distributions, sums, products etc.
* some sort of simulation
* R5: gui's
* data transformations / basic ORM / regular expressions
* generally, something about how you break down a problem into classes
* math, science, statistics, graphics
* where do I use it: scales, layers, lubridate, 
* structure checking code (see Paul's package for ideas): e.g. how to represent a list that contains a character vector of length 1, or 2-10, or more than 5, or exact value, or repetitive value c(a, b, a, c, a, d)?  . Regular expressions for R objects. Operator overloading
* 